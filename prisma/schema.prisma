// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          String   @id @default(cuid())
  email       String   @unique
  password    String
  name        String?
  collegeName String?
  role        Role     @default(STUDENT)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Email verification fields
  emailVerified      Boolean   @default(false)
  emailVerificationToken String?
  emailVerificationExpires DateTime?
  
  // Password reset fields
  passwordResetToken String?
  passwordResetExpires DateTime?

  // Relations
  createdMCQSets    MCQSet[]
  createdMCQQuestions MCQQuestion[]
  mcqAttempts       MCQAttempt[]
  blogPosts         BlogPost[]
  blogComments      BlogComment[]
  blogLikes         BlogLike[]

  @@map("users")
}

model Category {
  id          String   @id @default(cuid())
  name        String   @unique
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("categories")
}

model Subject {
  id          String   @id @default(cuid())
  name        String   @unique
  code        String   @unique
  semester    Int
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  pdfs        PDF[]

  @@map("subjects")
}

model PDF {
  id          String   @id @default(cuid())
  title       String
  description String?
  fileName    String
  fileSize    Int      // Size in bytes
  r2Key       String   @unique // Unique key/ID for R2 storage
  branch      String   // Branch code (CS, EC, ME, etc.)
  semester    Int
  subjectId   String
  uploadedBy  String   // Admin user ID
  downloads   Int      @default(0)
  views       Int      @default(0)
  featured    Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  subject     Subject  @relation(fields: [subjectId], references: [id], onDelete: Cascade)

  @@index([branch, semester])
  @@index([subjectId])
  @@map("pdfs")
}

enum Role {
  STUDENT
  ADMIN
  SUPERADMIN
}



model MCQSet {
  id          String   @id @default(cuid())
  title       String
  description String
  difficulty  Difficulty
  category    String
  timerMode   TimerMode @default(TOTAL_TIME) // TOTAL_TIME or PER_QUESTION
  totalTimeLimit Int?  // Total time for entire quiz in minutes (Option 1)
  questionTimeLimit Int? // Time per question in seconds (Option 2)
  tags        String[] // Array of tags
  companies   String[] // Array of companies
  featured    Boolean  @default(false)
  showInHomePreview Boolean @default(false) // Show in home page preview section
  homePreviewPosition Int? @unique // Position on home page (1-5: 1-4 small cards, 5 big card)
  bannerImage String?  // URL to banner image for home page display
  status      MCQStatus @default(DRAFT)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Foreign keys
  createdBy   String

  // Relations
  creator     User        @relation(fields: [createdBy], references: [id])
  questions   MCQQuestion[]
  attempts    MCQAttempt[]

  @@map("mcq_sets")
}

model MCQQuestion {
  id          String   @id @default(cuid())
  question    String
  options     String[] // Array of 4 options
  correctAnswer Int    // Index of correct answer (0-3)
  explanation String?
  hint        String?  // Hint for the question
  difficulty  Difficulty @default(BEGINNER)
  tags        String[] // Array of tags
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Foreign keys
  mcqSetId    String
  createdBy   String

  // Relations
  mcqSet      MCQSet @relation(fields: [mcqSetId], references: [id], onDelete: Cascade)
  creator     User   @relation(fields: [createdBy], references: [id])

  @@map("mcq_questions")
}

model MCQAttempt {
  id          String   @id @default(cuid())
  score       Int      // Score achieved
  totalQuestions Int   // Total questions in the set at time of attempt
  timeSpent   Int      // Time spent in seconds
  answers     Json     // User's answers and question details
  completed   Boolean  @default(false)
  createdAt   DateTime @default(now())

  // Foreign keys
  mcqSetId    String
  userId      String

  // Relations
  mcqSet      MCQSet @relation(fields: [mcqSetId], references: [id], onDelete: Cascade)
  user        User   @relation(fields: [userId], references: [id])

  @@map("mcq_attempts")
}

enum Difficulty {
  BEGINNER
  INTERMEDIATE
  ADVANCED
}

enum MCQStatus {
  DRAFT
  ACTIVE
  ARCHIVED
}

enum TimerMode {
  TOTAL_TIME    // Option 1: Time limit for entire quiz set
  PER_QUESTION  // Option 2: Time limit per individual question
}

// Blog Models
model BlogPost {
  id          String   @id @default(cuid())
  title       String
  slug        String   @unique
  excerpt     String
  content     String
  imageUrl    String?
  featured    Boolean  @default(false)
  published   Boolean  @default(false)
  views       Int      @default(0)
  readTime    Int      @default(5) // in minutes
  seoTitle    String?
  seoDescription String?
  publishedAt DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Foreign keys
  authorId    String
  categoryId  String

  // Relations
  author      User          @relation(fields: [authorId], references: [id])
  category    BlogCategory  @relation(fields: [categoryId], references: [id])
  tags        BlogPostTag[]
  comments    BlogComment[]
  likes       BlogLike[]

  @@map("blog_posts")
}

model BlogCategory {
  id          String   @id @default(cuid())
  name        String   @unique
  slug        String   @unique
  description String?
  color       String   @default("#3B82F6") // Hex color for UI
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  posts       BlogPost[]

  @@map("blog_categories")
}

model BlogTag {
  id          String   @id @default(cuid())
  name        String   @unique
  slug        String   @unique
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  posts       BlogPostTag[]

  @@map("blog_tags")
}

model BlogPostTag {
  id        String   @id @default(cuid())
  postId    String
  tagId     String
  createdAt DateTime @default(now())

  // Relations
  post      BlogPost @relation(fields: [postId], references: [id], onDelete: Cascade)
  tag       BlogTag  @relation(fields: [tagId], references: [id], onDelete: Cascade)

  @@unique([postId, tagId])
  @@map("blog_post_tags")
}

model BlogComment {
  id        String   @id @default(cuid())
  content   String
  approved  Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Foreign keys
  postId    String
  authorId  String
  parentId  String? // For nested comments

  // Relations
  post      BlogPost      @relation(fields: [postId], references: [id], onDelete: Cascade)
  author    User          @relation(fields: [authorId], references: [id])
  parent    BlogComment?  @relation("CommentReplies", fields: [parentId], references: [id])
  replies   BlogComment[] @relation("CommentReplies")

  @@map("blog_comments")
}

model BlogLike {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())

  // Foreign keys
  postId    String
  userId    String

  // Relations
  post      BlogPost @relation(fields: [postId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id])

  @@unique([postId, userId])
  @@map("blog_likes")
}
