// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          String   @id @default(cuid())
  email       String   @unique
  password    String
  name        String?
  collegeName String?
  role        Role     @default(STUDENT)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  uploadedResources Resource[]
  createdMCQSets    MCQSet[]
  createdMCQQuestions MCQQuestion[]
  mcqAttempts       MCQAttempt[]

  @@map("users")
}

model Category {
  id          String   @id @default(cuid())
  name        String   @unique
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  resources Resource[]

  @@map("categories")
}

model Subject {
  id          String   @id @default(cuid())
  name        String   @unique
  code        String   @unique
  semester    Int
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  resources Resource[]

  @@map("subjects")
}

model Resource {
  id          String       @id @default(cuid())
  title       String
  description String?
  fileName    String
  filePath    String
  fileSize    Int
  mimeType    String
  type        ResourceType
  semester    Int?
  year        Int?
  downloads   Int          @default(0)
  isActive    Boolean      @default(true)
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt

  // Foreign keys
  categoryId String
  subjectId  String?
  uploadedBy String

  // Relations
  category  Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  subject   Subject? @relation(fields: [subjectId], references: [id], onDelete: SetNull)
  uploader  User     @relation(fields: [uploadedBy], references: [id])

  @@map("resources")
}

enum Role {
  STUDENT
  ADMIN
}

enum ResourceType {
  QUESTION_PAPER
  STUDY_MATERIAL
  PREVIOUS_YEAR_PAPER
  SYLLABUS
  NOTES
  OTHER
}

model MCQSet {
  id          String   @id @default(cuid())
  title       String
  description String
  difficulty  Difficulty
  category    String
  timeLimit   Int      @default(30) // in minutes
  tags        String[] // Array of tags
  companies   String[] // Array of companies
  featured    Boolean  @default(false)
  status      MCQStatus @default(DRAFT)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Foreign keys
  createdBy   String

  // Relations
  creator     User        @relation(fields: [createdBy], references: [id])
  questions   MCQQuestion[]
  attempts    MCQAttempt[]

  @@map("mcq_sets")
}

model MCQQuestion {
  id          String   @id @default(cuid())
  question    String
  options     String[] // Array of 4 options
  correctAnswer Int    // Index of correct answer (0-3)
  explanation String?
  hint        String?  // Hint for the question
  difficulty  Difficulty @default(BEGINNER)
  tags        String[] // Array of tags
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Foreign keys
  mcqSetId    String
  createdBy   String

  // Relations
  mcqSet      MCQSet @relation(fields: [mcqSetId], references: [id], onDelete: Cascade)
  creator     User   @relation(fields: [createdBy], references: [id])

  @@map("mcq_questions")
}

model MCQAttempt {
  id          String   @id @default(cuid())
  score       Int      // Score achieved
  totalQuestions Int   // Total questions in the set at time of attempt
  timeSpent   Int      // Time spent in seconds
  answers     Json     // User's answers and question details
  completed   Boolean  @default(false)
  createdAt   DateTime @default(now())

  // Foreign keys
  mcqSetId    String
  userId      String

  // Relations
  mcqSet      MCQSet @relation(fields: [mcqSetId], references: [id], onDelete: Cascade)
  user        User   @relation(fields: [userId], references: [id])

  @@map("mcq_attempts")
}

enum Difficulty {
  BEGINNER
  INTERMEDIATE
  ADVANCED
}

enum MCQStatus {
  DRAFT
  ACTIVE
  ARCHIVED
}
